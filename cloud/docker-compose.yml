services:
  emqx:
    image: emqx/emqx:latest
    container_name: emqx
    environment:
      - EMQX_ACCEPT_EULA=yes
      - EMQX_ALLOW_ANONYMOUS=false  # Disable anonymous access for enhanced security
      - EMQX_DASHBOARD__DEFAULT_USERNAME=your_username
      - EMQX_DASHBOARD__DEFAULT_PASSWORD=your_password
    ports:
      - "1883:1883"   # MQTT default port
      - "8883:8883"   # MQTT over TLS/SSL
      - "8083:8083"   # MQTT over WebSockets
      - "8084:8084"   # MQTT over Secure WebSockets
      - "18083:18083" # EMQX Dashboard
    volumes:
      - ./emqx_data:/opt/emqx/data
      - ./emqx_log:/opt/emqx/log
    healthcheck:
      test: ["CMD", "emqx_ctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
  nodered:
    image: nodered/node-red
    container_name: nodered
    ports:
      - "1880:1880"  # Node-RED web interface
    environment:
      - NODE_OPTIONS=--max_old_space_size=256
      - NODE_RED_ENABLE_PROJECTS=true
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_USER=${MQTT_USER}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      - POSTGRES_HOST=${PGHOST}
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${PGPASSWORD}
    volumes:
      - ./nodered_data:/data
    depends_on:
      emqx:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:1880 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  timescaledb:
    image: timescale/timescaledb:latest-pg17
    container_name: timescaledb
    environment:
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - ./timescaledb_data:/var/lib/postgresql/data
    ports:
      - 5432:5432  # PostgreSQL default port
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    environment:
      - HOST_PROC=/proc
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - PGHOST=${PGHOST}
      - PGPORT=${PGPORT}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_USER=${MQTT_USER}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      timescaledb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "telegraf --test --config /etc/telegraf/telegraf.conf || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"  # pgAdmin web interface
    volumes:
      - ./pgadmin_data:/var/lib/pgadmin
    depends_on:
      timescaledb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/pgadmin4/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana web interface
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./grafana_data:/var/lib/grafana
      - ./grafana_plugins:/var/lib/grafana/plugins
    depends_on:
      timescaledb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
  keydb:
    image: eqalpha/keydb:latest
    container_name: keydb
    restart: unless-stopped
    ports:
      - "6379:6379"  # Exposes KeyDB on the default Redis port
    volumes:
      - ./keydb_data:/data
  leaf:
    image: docker-registry.wur.nl/m-unlock/docker/leaf:dev
    container_name: leaf
    volumes:
      - ./config.yaml:/app/config.yaml
    restart: 
      unless-stopped
    depends_on:
      - emqx
      - timescaledb
      - keydb