# Define stages of the pipeline
stages:
  - test
  - publish

variables:
  GIT_DEPTH: 0  # Full history
  # Parallel test isolation settings
  PYTEST_ADDOPTS: "--forked --dist=worksteal --tb=short"
  # Prevent Redis conflicts in parallel execution
  REDIS_URL: "redis://localhost:6379"
  # Use temporary directories for test isolation
  TMPDIR: "/tmp"

# Job to run tests
test:
  stage: test
  image: registry.gitlab.com/labequipmentadapterframework/leaf:runner
  before_script:
    - mosquitto -d
    - redis-server --daemonize yes
    - source /venv/bin/activate
    - poetry lock
    - poetry install --with test,dev
  script:
    # Run ALL tests with forked process isolation
    - poetry run pytest -n auto tests/
      --cov=. --cov-report=term-missing --cov-report=xml:coverage.xml
      --cov-report=html:htmlcov --junitxml=test-reports/report.xml

  artifacts:
    when: always
    reports:
      junit: test-reports/*.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - test-reports/
      - htmlcov/
      - coverage.xml
  timeout: 20m  # Sufficient time for all tests with forked isolation


publish:
  stage: publish
  image: python:3.12
  before_script:
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry config pypi-token.pypi "$PYPI_TOKEN"
  script:
    - latest_tag=$(git describe --tags --abbrev=0)
    - commit_count=$(git rev-list ${latest_tag}..HEAD --count)
    - base_version=${latest_tag#v}
    - new_version="${base_version}.${commit_count}"
    - echo "New version $new_version"
    # update version in pyproject.toml without committing or tagging
    - sed -i -E "s/^(version\s*=\s*\")0\.0\.0(\".*)$/\1${new_version}\2/" pyproject.toml
    - head -n 10 pyproject.toml
    # And publish
    - poetry config virtualenvs.create false
    - poetry build
    - ls -l dist/
    - poetry publish
  only:
    - main
    - dev
